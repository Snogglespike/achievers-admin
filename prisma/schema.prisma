datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Attendace {
  Weekly
  Fortnightly
  Other
}

enum VaccinationStatus {
  Confirmed
  Uncofirmed
}

model Session {
  id           String @id
  userId       String
  accessToken  String @db.LongText
  refreshToken String @db.LongText
  expiresIn    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id String @id // Defined by Azure Active Directory.

  firstName              String
  lastName               String
  additionalEmail        String?
  mobile                 String
  address                String
  dateOfBirth            DateTime
  isPublishPhotoApproved Boolean
  isApprovedByMRC        Boolean
  isBoardMemeber         Boolean   @default(false)
  isCommiteeMemeber      Boolean   @default(false)
  isCurrentMemeber       Boolean   @default(false)
  inductionDate          DateTime?

  defaultAttendance            Attendace?
  vaccinationStatus            VaccinationStatus?
  policeCheckRenewalDate       DateTime?
  WWCCheckRenewalDate          DateTime?
  WWCCheckNumber               String?
  isVolunteerAgreementComplete Boolean

  emergencyContactName         String
  emergencyContactNumber       String
  emergencyContactAddress      String
  emergencyContactRelationship String

  occupation                   String?
  boardTermExpiryDate          DateTime?
  directorIdentificationNumber String?

  isActive Boolean   @default(true)
  endDate  DateTime?

  profilePicturePath String?
  policeCheckPath    String?
  WWCCheckPath       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  UserEOIForm UserEOIForm?

  @@unique([firstName, lastName])
}

model UserEOIForm {
  id String @id // Defined by Azure Active Directory.

  bestTimeToContact   String
  occupation          String
  volunteerExperience String
  interestedInRole    String
  mentoringLevel      String
  hearAboutUs         String
  mentorOrVolunteer   String
  preferredLocation   String
  preferredFrequency  String
  isOver18            Boolean

  referee1FirstName         String
  referee1Surname           String
  referee1Mobile            String
  referee1Email             String
  referee1BestTimeToContact String
  referee1Relationship      String

  referee2FirstName         String
  referee2Surname           String
  referee2Mobile            String
  referee2Email             String
  referee2BestTimeToContact String
  referee2Relationship      String

  User   User?   @relation(fields: [userId], references: [id])
  userId String? @unique
}

model Mentee {
  id String @id @default(cuid())

  firstName String
  lastName  String
  yearLevel String

  Chapter   Chapter? @relation(fields: [chapterId], references: [id])
  chapterId String?

  Mentors MentoringMentee[]

  @@unique([firstName, lastName])
}

model Chapter {
  id      String @id @default(cuid())
  name    String @unique
  address String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  MentoringMentees MentoringMentee[]
  Mentee           Mentee[]
  UserAtChapter    UserAtChapter[]
}

model UserAtChapter {
  userId String

  Chapter   Chapter @relation(fields: [chapterId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  chapterId String

  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, chapterId])
}

model MentoringMentee {
  userId String

  Mentee   Mentee @relation(fields: [menteeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  menteeId String

  Chapter   Chapter @relation(fields: [chapterId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  chapterId String

  assignedAt DateTime @default(now())
  assignedBy String

  frequencyInDays Int
  startDate       DateTime?
  isActive        Boolean   @default(true)

  @@id([userId, menteeId, chapterId])
}
