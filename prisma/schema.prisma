datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Attendace {
  Weekly
  Fortnightly
  Other
}

enum VaccinationStatus {
  Confirmed
  Uncofirmed
}

model User {
  id String @id // Defined by Azure Active Directory.

  firstName                    String
  lastName                     String
  email                        String             @unique
  additionalEmail              String?            @unique
  mobile                       String
  address                      String
  dateOfBirth                  DateTime
  isOver18                     Boolean
  isPublishPhotoApproved       Boolean
  isApprovedByMRC              Boolean
  isCommiteeMemeber            Boolean            @default(false)
  isCurrentMemeber             Boolean            @default(true)
  inductionDate                DateTime?
  isActiveMentor               Boolean            @default(true)
  attendance                   Attendace?
  vaccinationStatus            VaccinationStatus?
  policeCheckRenewalDate       DateTime?
  WWCCheckRenewalDate          DateTime?
  WWCCheckNumber               String?
  isVolunteerAgreementComplete Boolean
  isBoardMemeber               Boolean            @default(false)

  emergencyContactName         String
  emergencyContactNumber       String
  emergencyContactAddress      String
  emergencyContactRelationship String

  occupation                   String?
  boardTermExpiryDate          DateTime?
  directorIdentificationNumber String?
  endDate                      DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userAtChapters   UserAtChapter[]
  mentoringStudent MentoringStudent[]

  @@unique([firstName, lastName])
}

model Mentee {
  id String @id @default(cuid())

  firstName String
  lastName  String
  yearLevel String

  mentoringStudent MentoringStudent[]

  @@unique([firstName, lastName])
}

model Chapter {
  id      String @id @default(cuid())
  name    String @unique
  address String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userAtChapters    UserAtChapter[]
  mentoringStudents MentoringStudent[]
}

model UserAtChapter {
  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId String

  chapter   Chapter @relation(fields: [chapterId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  chapterId String

  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, chapterId])
}

model MentoringStudent {
  mentor User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId String

  mentee   Mentee @relation(fields: [menteeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  menteeId String

  chapter   Chapter @relation(fields: [chapterId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  chapterId String

  assignedAt DateTime @default(now())
  assignedBy String

  frequencyInDays Int
  startDate       DateTime?

  @@id([userId, menteeId, chapterId])
}
