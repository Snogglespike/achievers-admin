datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Session {
  azureADId    String @id
  oauth2State  String @unique
  accessToken  String @db.LongText
  refreshToken String @db.LongText
  expiresIn    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        Int     @id @default(autoincrement())
  azureADId String? @unique // Defined by Azure Active Directory.

  email           String @unique
  firstName       String
  lastName        String
  mobile          String
  addressStreet   String
  addressSuburb   String
  addressState    String
  addressPostcode String

  additionalEmail String?
  dateOfBirth     DateTime?

  emergencyContactName         String?
  emergencyContactNumber       String?
  emergencyContactAddress      String?
  emergencyContactRelationship String?

  nextOfKinName         String?
  nextOfKinNumber       String?
  nextOfKinAddress      String?
  nextOfKinRelationship String?

  profilePicturePath         String?
  hasApprovedToPublishPhotos Boolean?
  endDate                    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  eoIProfile         EoIProfile?
  welcomeCall        WelcomeCall?
  references         Reference[]
  induction          Induction?
  volunteerAgreement VolunteerAgreement?
  policeCheck        PoliceCheck?
  wwcCheck           WWCCheck?
  approvalbyMRC      ApprovalbyMRC?

  userAtChapter UserAtChapter[]
}

model EoIProfile {
  id Int @id @default(autoincrement())

  bestTimeToContact   String
  occupation          String
  volunteerExperience String
  role                String
  mentoringLevel      String
  heardAboutUs        String
  preferredFrequency  String
  isOver18            Boolean
  comment             String  @db.Text

  aboutMe String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model WelcomeCall {
  id Int @id @default(autoincrement())

  calledBy     String
  calledOnDate DateTime
  comment      String?  @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model Reference {
  id Int @id @default(autoincrement())

  firstName         String
  lastName          String
  mobile            String
  email             String
  bestTimeToContact String
  relationship      String

  generalComment String? @db.Text
  outcomeComment String? @db.Text

  hasKnowApplicantForAYear Boolean?
  isRelated                Boolean?
  isMentorRecommended      Boolean?

  calledBy     String?
  calledOndate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model Induction {
  id Int @id @default(autoincrement())

  runBy           String
  completedOnDate DateTime
  comment         String?  @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model VolunteerAgreement {
  id Int @id @default(autoincrement())

  isInformedOfConstitution    Boolean
  hasApprovedSafetyDirections Boolean
  hasAcceptedNoLegalResp      Boolean
  signedOn                    DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model PoliceCheck {
  id Int @id @default(autoincrement())

  filePath   String
  expiryDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model WWCCheck {
  id Int @id @default(autoincrement())

  wwcNumber  String
  filePath   String
  expiryDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model ApprovalbyMRC {
  id Int @id @default(autoincrement())

  completedBy   String
  submittedDate DateTime?
  comment       String?   @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model UserAtChapter {
  chapter   Chapter @relation(fields: [chapterId], references: [id])
  chapterId Int
  user      User    @relation(fields: [userId], references: [id])
  userId    Int

  assignedAt DateTime @default(now())
  assignedBy String

  @@id([chapterId, userId])
}

model Chapter {
  id      Int    @id @default(autoincrement())
  name    String @unique
  address String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userAtChapter UserAtChapter[]
}
